{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7) Git for good programming practices, cont."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Last class, we went over many basics of Git, including the main concept of staging and committing. Questions?\n",
    "\n",
    "![The Git Staging Area](images/lect06_git-staging-area.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![The Git Commit Workflow](images/lect06_git-committing.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ignoring Things\n",
    "\n",
    "\n",
    "What if we have files that we do not want Git to track for us,\n",
    "like backup files created by our editor or intermediate files created during data analysis?\n",
    "Let's create a few dummy files:\n",
    "\n",
    "~~~\n",
    "$ mkdir results\n",
    "$ touch a.dat b.dat c.dat results/a.out results/b.out\n",
    "~~~\n",
    "\n",
    "and see what Git says:\n",
    "\n",
    "~~~\n",
    "$ git status\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "On branch master\n",
    "Untracked files:\n",
    "  (use \"git add <file>...\" to include in what will be committed)\n",
    "\n",
    "\ta.dat\n",
    "\tb.dat\n",
    "\tc.dat\n",
    "\tresults/\n",
    "nothing added to commit but untracked files present (use \"git add\" to track)\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Putting these files under version control would be a waste of disk space.\n",
    "What's worse, having them all listed could distract us from changes that actually matter,\n",
    "so let's tell Git to ignore them.\n",
    "\n",
    "We do this by creating a file in the root directory of our project called `.gitignore`:\n",
    "\n",
    "and adding \n",
    "~~~\n",
    "*.dat\n",
    "results/\n",
    "~~~\n",
    "\n",
    "These patterns tell Git to ignore any file whose name ends in `.dat`\n",
    "and everything in the `results` directory.\n",
    "(If any of these files were already being tracked,\n",
    "Git would continue to track them.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have created this file,\n",
    "the output of `git status` is much cleaner:\n",
    "\n",
    "~~~\n",
    "On branch master\n",
    "Untracked files:\n",
    "  (use \"git add <file>...\" to include in what will be committed)\n",
    "\n",
    "\t.gitignore\n",
    "nothing added to commit but untracked files present (use \"git add\" to track)\n",
    "~~~\n",
    "\n",
    "The only thing Git notices now is the newly-created `.gitignore` file.\n",
    "You might think we wouldn't want to track it,\n",
    "but everyone we're sharing our repository with will probably want to ignore\n",
    "the same things that we're ignoring.\n",
    "Let's add and commit `.gitignore`:\n",
    "\n",
    "~~~\n",
    "$ git add .gitignore\n",
    "$ git commit -m \"Ignore data files and the results folder.\"\n",
    "$ git status\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "# On branch master\n",
    "nothing to commit, working directory clean\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a bonus, using `.gitignore` helps us avoid accidentally adding to the repository files that we don't want to track:\n",
    "\n",
    "~~~\n",
    "$ git add a.dat\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "The following paths are ignored by one of your .gitignore files:\n",
    "a.dat\n",
    "Use -f if you really want to add them.\n",
    "~~~\n",
    "\n",
    "If we really want to override our ignore settings,\n",
    "we can use `git add -f` to force Git to add something. For example,\n",
    "`git add -f a.dat`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also always see the status of ignored files if we want:\n",
    "\n",
    "~~~\n",
    "$ git status --ignored\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "On branch master\n",
    "Ignored files:\n",
    " (use \"git add -f <file>...\" to include in what will be committed)\n",
    "\n",
    "        a.dat\n",
    "        b.dat\n",
    "        c.dat\n",
    "        results/\n",
    "\n",
    "nothing to commit, working directory clean\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Branches!\n",
    "\n",
    "When you first start your project you will by default be on a branch called `master`. Check for yourself with the following command, which will show you all your branches.\n",
    "\n",
    "~~~\n",
    "$ git branch -a\n",
    "~~~\n",
    "\n",
    "If I now want to start adding a new feature, best practice is to start a new branch.\n",
    "\n",
    "~~~\n",
    "$ git checkout -b mercury\n",
    "~~~\n",
    "~~~\n",
    "Switched to a new branch 'mercury'\n",
    "~~~\n",
    "\n",
    "The `-b` flag created the new branch and switched to it. At any time, we can confirm that there are now two branches, `master` and `mercury`, with `git branch -a`, which also highlights which branch you are on."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's make changes to the branch. \n",
    "\n",
    "~~~\n",
    "$ echo \"Mercury is the closest planet to our sun\" > mercury.txt\n",
    "$ git status\n",
    "$ git add .\n",
    "$ git commit -m 'Added first note re Mercury'\n",
    "~~~\n",
    "\n",
    "We can create multiple branches to work on different features, so let's do that:\n",
    "\n",
    "~~~\n",
    "$ git checkout -b saturn\n",
    "$ echo \"Saturn is my favorite planet because of its beautiful rings\" > saturn.txt\n",
    "$ git status\n",
    "$ git add .\n",
    "$ git commit -m 'Added first note re Saturn'\n",
    "~~~\n",
    "\n",
    "FYI: by default, branches will be made based on master. You can base a new branch off an existing branch with the command `git checkout -b <new-branch> <existing-branch>`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When I'm done with my changes on my local branch, I'm going to merge my master into my local branch. In this case, it is not strictly necessary because I know that I didn't change the master. \n",
    "\n",
    "~~~\n",
    "$ git merge master\n",
    "$ git checkout master\n",
    "$ git branch -a\n",
    "$ git merge saturn\n",
    "$ git branch -d saturn\n",
    "$ git branch -a\n",
    "~~~\n",
    "\n",
    "It is a good idea to clean up branches when you have finished making and then merging in the new feature."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remotes in GitHub"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Version control really comes into its own when we begin to collaborate with\n",
    "other people.  We already have most of the machinery we need to do this; the\n",
    "only thing missing is to copy changes from one repository to another.\n",
    "\n",
    "Systems like Git allow us to move work between any two repositories.  In\n",
    "practice, though, it's easiest to use one copy as a central hub, and to keep it\n",
    "on the web rather than on someone's laptop.  Most programmers use hosting\n",
    "services like [GitHub](https://github.com), [BitBucket](https://bitbucket.org) or\n",
    "[GitLab](https://gitlab.com/) to hold those master copies; we'll explore the pros\n",
    "and cons of this in the final section of this lesson."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start by sharing the changes we've made to our current project with the\n",
    "world.  Log in to GitHub, then click on the icon in the top right corner to\n",
    "create a new repository called `planets`:\n",
    "\n",
    "![Creating a Repository on GitHub (Step 1)](images/lect06_github-create-repo-01.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Name your repository \"planets\" and then click \"Create Repository\":\n",
    "\n",
    "![Creating a Repository on GitHub (Step 2)](images/lect06_github-create-repo-02.png)\n",
    "\n",
    "As soon as the repository is created, GitHub displays a page with a URL and some\n",
    "information on how to configure your local repository:\n",
    "\n",
    "![Creating a Repository on GitHub (Step 3)](images/lect06_github-create-repo-03.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This effectively does the following on GitHub's servers:\n",
    "\n",
    "~~~\n",
    "$ mkdir planets\n",
    "$ cd planets\n",
    "$ git init\n",
    "~~~\n",
    "\n",
    "If you remember back when we added and commited our earlier work on `mars.txt`, we had a diagram of the local repository\n",
    "which looked like this:\n",
    "\n",
    "![The Local Repository with Git Staging Area](images/lect06_git-staging-area.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have two repositories, we need a diagram like this:\n",
    "\n",
    "![Freshly-Made GitHub Repository](images/lect06_git-freshly-made-github-repo.svg)\n",
    "\n",
    "Note that our local repository still contains our earlier work on `mars.txt`, but the\n",
    "remote repository on GitHub appears empty as it doesn't contain any files yet."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step is to connect the two repositories.  We do this by making the\n",
    "GitHub repository a [remote](http://swcarpentry.github.io/git-novice/reference#remote) for the local repository.\n",
    "The home page of the repository on GitHub includes the string we need to\n",
    "identify it:\n",
    "\n",
    "![Where to Find Repository URL on GitHub](images/lect06_github-find-repo-string.png)\n",
    "\n",
    "Click on the 'HTTPS' link to change the [protocol](http://swcarpentry.github.io/git-novice}/reference#protocol) from\n",
    "SSH to HTTPS."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FYI: HTTPS vs. SSH\n",
    "\n",
    "We use HTTPS here because it does not require additional configuration. Later\n",
    "you may want to set up SSH access, which is a bit more secure, by\n",
    "following one of the great tutorials from\n",
    "[GitHub](https://help.github.com/articles/generating-ssh-keys),\n",
    "[Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git)\n",
    "and [GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n",
    "(this one has a screencast)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Back to the remote\n",
    "\n",
    "Copy the the URL above from the browser, go into the local `planets` repository, and run\n",
    "this command:\n",
    "\n",
    "~~~\n",
    "$ git remote add origin https://github.com/vlad/planets.git\n",
    "~~~\n",
    "\n",
    "Make sure to use the URL for your repository rather than Vlad's: the only\n",
    "difference should be your username instead of `vlad`.\n",
    "\n",
    "We can check that the command has worked by running `git remote -v`:\n",
    "\n",
    "~~~\n",
    "origin   https://github.com/vlad/planets.git (push)\n",
    "origin   https://github.com/vlad/planets.git (fetch)\n",
    "~~~\n",
    "\n",
    "The name `origin` is a local nickname for your remote repository. We could use\n",
    "something else if we wanted to, but `origin` is by far the most common choice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the nickname `origin` is set up, this command will push the changes from\n",
    "our local repository to the repository on GitHub:\n",
    "\n",
    "~~~\n",
    "$ git push origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "Counting objects: 9, done.\n",
    "Delta compression using up to 4 threads.\n",
    "Compressing objects: 100% (6/6), done.\n",
    "Writing objects: 100% (9/9), 821 bytes, done.\n",
    "Total 9 (delta 2), reused 0 (delta 0)\n",
    "To https://github.com/vlad/planets\n",
    " * [new branch]      master -> master\n",
    "Branch master set up to track remote branch master from origin.\n",
    "~~~\n",
    "\n",
    "The `git branch -a` command from earlier will display both your local and remote branches."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FYI: Network Proxies\n",
    "\n",
    "If the network you are connected to uses a proxy, there is a chance that your\n",
    "last command failed with \"Could not resolve hostname\" as the error message. To\n",
    "solve this issue, you need to tell Git about the proxy:\n",
    "\n",
    "~~~\n",
    "$ git config --global http.proxy http://user:password@proxy.url\n",
    "$ git config --global https.proxy http://user:password@proxy.url\n",
    "~~~\n",
    "\n",
    "When you connect to another network that doesn't use a proxy, you will need to\n",
    "tell Git to disable the proxy using:\n",
    "\n",
    "~~~\n",
    "$ git config --global --unset http.proxy\n",
    "$ git config --global --unset https.proxy\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### FYI on Password Managers\n",
    "\n",
    "If your operating system has a password manager configured, `git push` will\n",
    "try to use it when it needs your username and password.  For example, this\n",
    "is the default behavior for Git Bash on Windows. If you want to type your\n",
    "username and password at the terminal instead of using a password manager,\n",
    "type:\n",
    "\n",
    "~~~\n",
    "$ unset SSH_ASKPASS\n",
    "~~~\n",
    "\n",
    "in the terminal, before you run `git push`.  Despite the name, [git uses\n",
    "`SSH_ASKPASS` for all credential\n",
    "entry](https://git-scm.com/docs/gitcredentials#_requesting_credentials), so\n",
    "you may want to unset `SSH_ASKPASS` whether you are using git via SSH or\n",
    "https.\n",
    "\n",
    "You may also want to add `unset SSH_ASKPASS` at the end of your `~/.bashrc`\n",
    "to make git default to using the terminal for usernames and passwords."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Back to our local and remote repositories\n",
    "\n",
    "They are now in this state:\n",
    "\n",
    "![GitHub Repository After First Push](images/lect06_github-repo-after-first-push.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can pull changes from the remote repository to the local one as well:\n",
    "\n",
    "~~~\n",
    "$ git pull origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "From https://github.com/vlad/planets\n",
    " * branch            master     -> FETCH_HEAD\n",
    "Already up-to-date.\n",
    "~~~\n",
    "\n",
    "Pulling has no effect in this case because the two repositories are already\n",
    "synchronized.  If someone else had pushed some changes to the repository on\n",
    "GitHub, though, this command would download them to our local repository."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Collaborating"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the next step, get into pairs.  One person will be the \"Owner\" and the other\n",
    "will be the \"Collaborator\". The goal is that the Collaborator add changes into\n",
    "the Owner's repository. We will switch roles at the end, so both persons will\n",
    "play Owner and Collaborator.\n",
    "\n",
    "If you're working through this lesson on your own, you can carry on by opening\n",
    "a second terminal window. This window will represent your partner, working on another computer. You\n",
    "won't need to give anyone access on GitHub, because both 'partners' are you.\n",
    "\n",
    "If you do have a partner, the Owner needs to give the Collaborator access.\n",
    "On GitHub, click the settings button on the right,\n",
    "then select Collaborators, and enter your partner's username.\n",
    "\n",
    "![Adding Collaborators on GitHub](images/lect06_github-add-collaborators.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To accept access to the Owner's repo, the Collaborator\n",
    "needs to go to [https://github.com/notifications](https://github.com/notifications).\n",
    "Once there she can accept access to the Owner's repo.\n",
    "\n",
    "Next, the Collaborator needs to download a copy of the Owner's repository to her\n",
    " machine. This is called \"cloning a repo\". To clone the Owner's repo into\n",
    "her `Desktop` folder, the Collaborator enters:\n",
    "\n",
    "~~~\n",
    "$ git clone https://github.com/vlad/planets.git ~/Desktop/vlad-planets\n",
    "~~~\n",
    "\n",
    "Replace 'vlad' with the Owner's username.\n",
    "\n",
    "![After Creating Clone of Repository](images/lect06_github-collaboration.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Collaborator can now make a change in her clone of the Owner's repository,\n",
    "exactly the same way as we've been doing before. It is best practice to only make changes to a new branch:\n",
    "\n",
    "~~~\n",
    "$ cd ~/Desktop/vlad-planets\n",
    "$ git checkout -b pluto\n",
    "$ echo 'It is so a planet!' > pluto.txt\n",
    "$ git add pluto.txt\n",
    "$ git commit -m \"Add notes about Pluto\"\n",
    "~~~\n",
    "\n",
    "~~~\n",
    " 1 file changed, 1 insertion(+)\n",
    " create mode 100644 pluto.txt\n",
    "~~~\n",
    "\n",
    "Then push the change to the *Owner's repository* on GitHub, but as a new branch:\n",
    "\n",
    "~~~\n",
    "$ git push --set-upstream origin pluto\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a look to the Owner's repository on its GitHub website now (maybe you need\n",
    "to refresh your browser). You should be able to see that there is a new branch available. If you wish, you request that the branch be merged to master. \n",
    "\n",
    "![Request pull and merge](images/lect06_github-compare-pull.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, you can describe the features that you added (optional) or any other note for the owner to see before reviewing the request. You can also see what has changed.\n",
    "![Add description](images/lect06_github-add-descript.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If there are no conflicts (e.g. someone else already made a different file with the same name), you can review and accept.\n",
    "![No conflicts](images/lect06_github-no-conflicts.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Success](images/lect06_github-pull-success.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can delete the remote branch now, and the Collaborator can delete the local branch `pluto` as well, if desired.\n",
    "\n",
    "On the Owner's local computer, to download the Collaborator's changes from GitHub, the Owner now enters:\n",
    "\n",
    "~~~\n",
    "$ git pull origin master\n",
    "~~~\n",
    "\n",
    "Now the three repositories (Owner's local, Collaborator's local, and Owner's on\n",
    "GitHub) are back in sync."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A Basic Collaborative Workflow\n",
    "\n",
    "In practice, it is good to be sure that you have an updated version of the\n",
    "repository you are collaborating on, so you should `git pull` before making\n",
    "our changes. The basic collaborative workflow would be:\n",
    "\n",
    "- update your local repo with `git pull origin master`\n",
    "- create a branch on which to make changes `git checkout -b <new-feature>`\n",
    "- make your changes and stage them with `git add`\n",
    "- commit your changes with `git commit -m`\n",
    "- check if there will be any conflicts with the master with `git merge master` and resolve if necessary (see below)\n",
    "- upload the changes to GitHub with `git push --set-upstream origin <new-feature>`\n",
    "- request that the new branch it push origin master\n",
    "- delete remote and local branches\n",
    "\n",
    "It is better to make many commits with smaller changes rather than\n",
    "of one commit with massive changes: small commits are easier to\n",
    "read and review."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Comment Changes in GitHub\n",
    "\n",
    "The Collaborator has some questions about one line change made by the Owner and\n",
    "has some suggestions to propose.\n",
    "\n",
    "With GitHub, it is possible to comment the diff of a commit. Over the line of\n",
    "code to comment, a blue comment icon appears to open a comment window.\n",
    "\n",
    "The Collaborator posts its comments and suggestions using GitHub interface."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conflicts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As soon as people can work in parallel, they'll likely step on each other's\n",
    "toes.  This will even happen with a single person: if we are working on\n",
    "a piece of software on both our laptop and a server in the lab, we could make\n",
    "different changes to each copy.  Version control helps us manage these\n",
    "[conflicts]({{ page.root }}/reference#conflicts) by giving us tools to\n",
    "[resolve]({{ page.root }}/reference#resolve) overlapping changes.\n",
    "\n",
    "To see how we can resolve conflicts, we must first create one.  The file\n",
    "`mars.txt` currently looks like this in both partners' copies of our `planets`\n",
    "repository:\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's add a line to one partner's copy only:\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "This line added to Wolfman's copy\n",
    "~~~\n",
    "\n",
    "and then push the change to GitHub:\n",
    "\n",
    "~~~\n",
    "$ git add mars.txt\n",
    "$ git commit -m \"Add a line in our home copy\"\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "[master 5ae9631] Add a line in our home copy\n",
    " 1 file changed, 1 insertion(+)\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "$ git push origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "Counting objects: 5, done.\n",
    "Delta compression using up to 4 threads.\n",
    "Compressing objects: 100% (3/3), done.\n",
    "Writing objects: 100% (3/3), 352 bytes, done.\n",
    "Total 3 (delta 1), reused 0 (delta 0)\n",
    "To https://github.com/vlad/planets\n",
    "   29aba7c..dabb4c8  master -> master\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's have the other partner\n",
    "make a different change to their copy\n",
    "*without* updating from GitHub:\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "We added a different line in the other copy\n",
    "~~~\n",
    "\n",
    "We can commit the change locally:\n",
    "\n",
    "~~~\n",
    "$ git add mars.txt\n",
    "$ git commit -m \"Add a line in my copy\"\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "[master 07ebc69] Add a line in my copy\n",
    " 1 file changed, 1 insertion(+)\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "but Git won't let us push it to GitHub:\n",
    "\n",
    "~~~\n",
    "$ git push origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "To https://github.com/vlad/planets.git\n",
    " ! [rejected]        master -> master (non-fast-forward)\n",
    "error: failed to push some refs to 'https://github.com/vlad/planets.git'\n",
    "hint: Updates were rejected because the tip of your current branch is behind\n",
    "hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\n",
    "hint: before pushing again.\n",
    "hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n",
    "~~~\n",
    "\n",
    "![The Conflicting Changes](images/lect06_conflict.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Git rejects the push because it detects that the remote repository has new updates that have not been\n",
    "incorporated into the local branch.\n",
    "What we have to do is pull the changes from GitHub,\n",
    "[merge]({{ page.root }}/reference#merge) them into the copy we're currently working in,\n",
    "and then push that.\n",
    "Let's start by pulling:\n",
    "\n",
    "~~~\n",
    "$ git pull origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "remote: Counting objects: 5, done.\n",
    "remote: Compressing objects: 100% (2/2), done.\n",
    "remote: Total 3 (delta 1), reused 3 (delta 1)\n",
    "Unpacking objects: 100% (3/3), done.\n",
    "From https://github.com/vlad/planets\n",
    " * branch            master     -> FETCH_HEAD\n",
    "Auto-merging mars.txt\n",
    "CONFLICT (content): Merge conflict in mars.txt\n",
    "Automatic merge failed; fix conflicts and then commit the result.\n",
    "~~~\n",
    "\n",
    "The `git pull` command updates the local repository to include those\n",
    "changes already included in the remote repository.\n",
    "After the changes from remote branch have been fetched, Git detects that changes made to the local copy \n",
    "overlap with those made to the remote repository, and therefore refuses to merge the two versions to\n",
    "stop us from trampling on our previous work. The conflict is marked in\n",
    "in the affected file:\n",
    "\n",
    "~~~\n",
    "$ cat mars.txt\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "<<<<<<< HEAD\n",
    "We added a different line in the other copy\n",
    "=======\n",
    "This line added to Wolfman's copy\n",
    ">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our change is preceded by `<<<<<<< HEAD`.\n",
    "Git has then inserted `=======` as a separator between the conflicting changes\n",
    "and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n",
    "(The string of letters and digits after that marker\n",
    "identifies the commit we've just downloaded.)\n",
    "\n",
    "It is now up to us to edit this file to remove these markers\n",
    "and reconcile the changes.\n",
    "We can do anything we want: keep the change made in the local repository, keep\n",
    "the change made in the remote repository, write something new to replace both,\n",
    "or get rid of the change entirely.\n",
    "Let's replace both so that the file looks like this:\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "We removed the conflict on this line\n",
    "~~~\n",
    "\n",
    "To finish merging,\n",
    "we add `mars.txt` to the changes being made by the merge\n",
    "and then commit:\n",
    "\n",
    "~~~\n",
    "$ git add mars.txt\n",
    "$ git status\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "On branch master\n",
    "All conflicts fixed but you are still merging.\n",
    "  (use \"git commit\" to conclude merge)\n",
    "\n",
    "Changes to be committed:\n",
    "\n",
    "\tmodified:   mars.txt\n",
    "\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "~~~\n",
    "$ git commit -m \"Merge changes from GitHub\"\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "[master 2abf2b1] Merge changes from GitHub\n",
    "~~~\n",
    "\n",
    "Now we can push our changes to GitHub:\n",
    "\n",
    "~~~\n",
    "$ git push origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "Counting objects: 10, done.\n",
    "Delta compression using up to 4 threads.\n",
    "Compressing objects: 100% (6/6), done.\n",
    "Writing objects: 100% (6/6), 697 bytes, done.\n",
    "Total 6 (delta 2), reused 0 (delta 0)\n",
    "To https://github.com/vlad/planets.git\n",
    "   dabb4c8..2abf2b1  master -> master\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Git keeps track of what we've merged with what,\n",
    "so we don't have to fix things by hand again\n",
    "when the collaborator who made the first change pulls again:\n",
    "\n",
    "~~~\n",
    "$ git pull origin master\n",
    "~~~\n",
    "\n",
    "~~~\n",
    "remote: Counting objects: 10, done.\n",
    "remote: Compressing objects: 100% (4/4), done.\n",
    "remote: Total 6 (delta 2), reused 6 (delta 2)\n",
    "Unpacking objects: 100% (6/6), done.\n",
    "From https://github.com/vlad/planets\n",
    " * branch            master     -> FETCH_HEAD\n",
    "Updating dabb4c8..2abf2b1\n",
    "Fast-forward\n",
    " mars.txt | 2 +-\n",
    " 1 file changed, 1 insertion(+), 1 deletion(-)\n",
    "~~~\n",
    "\n",
    "We get the merged file:\n",
    "\n",
    "~~~\n",
    "Cold and dry, but everything is my favorite color\n",
    "The two moons may be a problem for Wolfman\n",
    "But the Mummy will appreciate the lack of humidity\n",
    "We removed the conflict on this line\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We don't need to merge again because Git knows someone has already done that.\n",
    "\n",
    "Git's ability to resolve conflicts is very useful, but conflict resolution\n",
    "costs time and effort, and can introduce errors if conflicts are not resolved\n",
    "correctly. If you find yourself resolving a lot of conflicts in a project,\n",
    "consider these technical approaches to reducing them:\n",
    "\n",
    "- Pull from upstream more frequently, especially before starting new work\n",
    "- Use topic branches to segregate work, merging to master when complete\n",
    "- Make smaller more atomic commits\n",
    "- Where logically appropriate, break large files into smaller ones so that it is\n",
    "  less likely that two authors will alter the same file simultaneously\n",
    "\n",
    "Conflicts can also be minimized with project management strategies:\n",
    "\n",
    "- Clarify who is responsible for what areas with your collaborators\n",
    "- Discuss what order tasks should be carried out in with your collaborators so\n",
    "  that tasks expected to change the same lines won't be worked on simultaneously\n",
    "- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n",
    "  project convention that is governing and use code style tools (e.g.\n",
    "  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*FYI*: If you want to add to a project on which you are not a collaborator, you can instead [`fork`](https://help.github.com/articles/fork-a-repo/) the repo, and eventually even ask the original project owner if they want to incorporate your changes.\n",
    "\n",
    "*Note*: you can still copy any public repo even if you are not listed as a collaborator. Case in point, this class! \n",
    "\n",
    "All ipynb for this course, except for solved assignments, will be publicly available at:\n",
    "https://github.com/team-mayes/che_696\n",
    "\n",
    "I work on my local computer, make commits as desired, and when ipynbs are in a mostly final stage, I push them to this public repository. The easiest way for you to get copies of these notebooks are for you to `clone` the repo, e.g.:\n",
    "\n",
    "~~~\n",
    "git clone https://github.com/team-mayes/che_696.git che_696_mayes\n",
    "~~~\n",
    "\n",
    "Then, shortly before each class make sure you are up-to-date with recent edits by using:\n",
    "\n",
    "~~~\n",
    "git pull\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Open Science"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> The opposite of \"open\" isn't \"closed\".\n",
    "> The opposite of \"open\" is \"broken\".\n",
    ">\n",
    "> --- John Wilbanks\n",
    "\n",
    "\n",
    "Free sharing of information might be the ideal in science,\n",
    "but the reality is often more complicated.\n",
    "Normal practice today looks something like this:\n",
    "\n",
    "-   A scientist collects some data and stores it on a machine\n",
    "    that is occasionally backed up by her department.\n",
    "-   She then writes or modifies a few small programs\n",
    "    (which also reside on her machine)\n",
    "    to analyze that data.\n",
    "-   Once she has some results,\n",
    "    she writes them up and submits her paper.\n",
    "    She might include her data—a growing number of journals require this—but\n",
    "    she probably doesn't include her code.\n",
    "-   Time passes.\n",
    "-   The journal sends her reviews written anonymously by a handful of other people in her field.\n",
    "    She revises her paper to satisfy them,\n",
    "    during which time she might also modify the scripts she wrote earlier,\n",
    "    and resubmits.\n",
    "-   More time passes.\n",
    "-   The paper is eventually published.\n",
    "    It might include a link to an online copy of her data,\n",
    "    but the paper itself will be behind a paywall:\n",
    "    only people who have personal or institutional access\n",
    "    will be able to read it.\n",
    "\n",
    "For a growing number of scientists,\n",
    "though, the process looks like this:\n",
    "\n",
    "-   The data that the scientist collects is stored in an open access repository\n",
    "    like [figshare](https://figshare.com/) or\n",
    "    [Zenodo](https://zenodo.org), possibly as soon as it's collected,\n",
    "    and given its own\n",
    "    [Digital Object Identifier](https://en.wikipedia.org/wiki/Digital_object_identifier) (DOI).\n",
    "    Or the data was already published and is stored in\n",
    "    [Dryad](https://datadryad.org/).\n",
    "-   The scientist creates a new repository on GitHub to hold her work.\n",
    "-   As she does her analysis,\n",
    "    she pushes changes to her scripts\n",
    "    (and possibly some output files)\n",
    "    to that repository.\n",
    "    She also uses the repository for her paper;\n",
    "    that repository is then the hub for collaboration with her colleagues.\n",
    "-   When she's happy with the state of her paper,\n",
    "    she posts a version to [arXiv](https://arxiv.org/)\n",
    "    or some other preprint server\n",
    "    to invite feedback from peers.\n",
    "-   Based on that feedback,\n",
    "    she may post several revisions\n",
    "    before finally submitting her paper to a journal.\n",
    "-   The published paper includes links to her preprint\n",
    "    and to her code and data repositories,\n",
    "    which  makes it much easier for other scientists\n",
    "    to use her work as starting point for their own research.\n",
    "\n",
    "This open model accelerates discovery:\n",
    "the more open work is,\n",
    "[the more widely it is cited and re-used](https://doi.org/10.1371/journal.pone.0000308)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, people who want to work this way need to make some decisions\n",
    "about what exactly \"open\" means and how to do it. You can find more on the different aspects of Open Science in [this book](https://link.springer.com/book/10.1007/978-3-319-00026-8).\n",
    "\n",
    "This is one of the (many) reasons we teach version control.\n",
    "When used diligently, it answers the \"how\" question\n",
    "by acting as a shareable electronic lab notebook for computational work:\n",
    "\n",
    "-   The conceptual stages of your work are documented, including who did\n",
    "    what and when. Every step is stamped with an identifier (the commit ID)\n",
    "    that is for most intents and purposes unique.\n",
    "-   You can tie documentation of rationale, ideas, and other\n",
    "    intellectual work directly to the changes that spring from them.\n",
    "-   You can refer to what you used in your research to obtain your\n",
    "    computational results in a way that is unique and recoverable.\n",
    "-   With a version control system such as Git, \n",
    "    the entire history of the repository is easy to archive for perpetuity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Licensing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When a repository with source code, a manuscript or other creative\n",
    "works becomes public, it should include a file `LICENSE` or\n",
    "`LICENSE.txt` in the base directory of the repository that clearly\n",
    "states under which license the content is being made available. This\n",
    "is because creative works are automatically eligible for intellectual\n",
    "property (and thus copyright) protection. Reusing creative works\n",
    "without a license is dangerous, because the copyright holders could\n",
    "sue you for copyright infringement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A license solves this problem by granting rights to others (the\n",
    "licensees) that they would otherwise not have. What rights are being\n",
    "granted under which conditions differs, often only slightly, from one\n",
    "license to another. In practice, a few licenses are by far the most\n",
    "popular, and [choosealicense.com](https://choosealicense.com/) will\n",
    "help you find a common license that suits your needs.  Important\n",
    "considerations include:\n",
    "\n",
    "- Whether you want to address patent rights.\n",
    "- Whether you require people distributing derivative works to also\n",
    "  distribute their source code.\n",
    "- Whether the content you are licensing is source code.\n",
    "- Whether you want to license the code at all.\n",
    "\n",
    "Choosing a license that is in common use makes life easier for\n",
    "contributors and users, because they are more likely to already be\n",
    "familiar with the license and don't have to wade through a bunch of\n",
    "jargon to decide if they're ok with it.  The [Open Source\n",
    "Initiative](https://opensource.org/licenses) and [Free Software\n",
    "Foundation](https://www.gnu.org/licenses/license-list.html) both\n",
    "maintain lists of licenses which are good choices.\n",
    "\n",
    "[This article](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002598) provides an excellent overview of licensing and licensing options from the perspective of scientists who\n",
    "also write code.\n",
    "\n",
    "At the end of the day what matters is that there is a clear statement\n",
    "as to what the license is. Also, the license is best chosen from the\n",
    "get-go, even if for a repository that is not public. Pushing off the\n",
    "decision only makes it more complicated later, because each time a new\n",
    "collaborator starts contributing, they, too, hold copyright and will\n",
    "thus need to be asked for approval once a license is chosen."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Citation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "You may want to include a file called `CITATION` or `CITATION.txt`\n",
    "that describes how to reference your project;\n",
    "the [one for Software\n",
    "Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n",
    "states:\n",
    "\n",
    "~~~\n",
    "To reference Software Carpentry in publications, please cite both of the following:\n",
    "\n",
    "Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n",
    "Code by Making Them More Productive\".  Computing in Science &\n",
    "Engineering, Nov-Dec 2006.\n",
    "\n",
    "Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n",
    "July 2013.\n",
    "\n",
    "@article{wilson-software-carpentry-2006,\n",
    "    author =  {Greg Wilson},\n",
    "    title =   {Software Carpentry: Getting Scientists to Write Better Code by Making Them More Productive},\n",
    "    journal = {Computing in Science \\& Engineering},\n",
    "    month =   {November--December},\n",
    "    year =    {2006},\n",
    "}\n",
    "\n",
    "@online{wilson-software-carpentry-2013,\n",
    "  author      = {Greg Wilson},\n",
    "  title       = {Software Carpentry: Lessons Learned},\n",
    "  version     = {1},\n",
    "  date        = {2013-07-20},\n",
    "  eprinttype  = {arxiv},\n",
    "  eprint      = {1307.5448}\n",
    "}\n",
    "~~~\n",
    "\n",
    "More detailed advice, and other ways to make your code citable can be found\n",
    "[at the Software Sustainability Institute blog](https://www.software.ac.uk/how-cite-and-describe-software) and in:\n",
    "\n",
    ">  Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. \n",
    ">  (2016) Software citation principles. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/) https://doi.org/10.7717/peerj-cs.86\n",
    " \n",
    "There is also an [`@software{…`](https://www.google.de/search?q=git+citation+%22%40software%7B%22) \n",
    "[BibTeX](https://www.ctan.org/pkg/bibtex) entry type in case\n",
    "no \"umbrella\" citation like a paper or book exists for the project you want to\n",
    "make citable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hosting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second big question for groups that want to open up their work is where to\n",
    "host their code and data.  One option is for the lab, the department, or the\n",
    "university to provide a server, manage accounts and backups, and so on.  The\n",
    "main benefit of this is that it clarifies who owns what, which is particularly\n",
    "important if any of the material is sensitive (i.e., relates to experiments\n",
    "involving human subjects or may be used in a patent application).  The main\n",
    "drawbacks are the cost of providing the service and its longevity: a scientist\n",
    "who has spent ten years collecting data would like to be sure that data will\n",
    "still be available ten years from now, but that's well beyond the lifespan of\n",
    "most of the grants that fund academic infrastructure.\n",
    "\n",
    "Another option is to purchase a domain and pay an Internet service provider\n",
    "(ISP) to host it.  This gives the individual or group more control, and\n",
    "sidesteps problems that can arise when moving from one institution to another,\n",
    "but requires more time and effort to set up than either the option above or the\n",
    "option below.\n",
    "\n",
    "The third option is to use a public hosting service like\n",
    "[GitHub](https://github.com), [GitLab](https://gitlab.com),or\n",
    "[BitBucket](https://bitbucket.org).\n",
    "Each of these services provides a web interface that enables people to create,\n",
    "view, and edit their code repositories.  These services also provide\n",
    "communication and project management tools including issue tracking, wiki pages,\n",
    "email notifications, and code reviews.  These services benefit from economies of\n",
    "scale and network effects: it's easier to run one large service well than to run\n",
    "many smaller services to the same standard.  It's also easier for people to\n",
    "collaborate.  Using a popular service can help connect your project with\n",
    "communities already using the same service."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example, Software Carpentry [is on\n",
    "GitHub]({{ swc_github }}) where you can find the [source for this\n",
    "page]({{page.root}}/_episodes/13-hosting.md).\n",
    "Anyone with a GitHub account can suggest changes to this text.\n",
    "\n",
    "GitHub repositories can also be assigned DOIs, [by connecting its releases to\n",
    "Zenodo](https://guides.github.com/activities/citable-code/). For example,\n",
    "[`10.5281/zenodo.57467`](https://zenodo.org/record/57467) is the DOI that has\n",
    "been \"minted\" for the Software Carpentry introduction to Git.\n",
    "\n",
    "Using large, well-established services can also help you quickly take advantage\n",
    "of powerful tools.  One such tool, continuous integration (CI), can\n",
    "automatically run software builds and tests whenever code is committed or pull\n",
    "requests are submitted.  Direct integration of CI with an online hosting service\n",
    "means this information is present in any pull request, and helps maintain code\n",
    "integrity and quality standards.  While CI is still available in self-hosted\n",
    "situations, there is much less setup and maintenance involved with using an\n",
    "online service.  Furthermore, such tools are often provided free of charge to\n",
    "open source projects, and are also available for private repositories for a fee."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Institutional Barriers\n",
    "\n",
    "Sharing is the ideal for science,\n",
    "but many institutions place restrictions on sharing,\n",
    "for example to protect potentially patentable intellectual property.\n",
    "If you encounter such restrictions,\n",
    "it can be productive to inquire about the underlying motivations and\n",
    "either to request an exception for a specific project or domain,\n",
    "or to push more broadly for institutional reform to support more open science."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary of key points from this notebook\n",
    "\n",
    "- Version control is like an unlimited ‘undo’.\n",
    "- Version control also allows many people to work in parallel.\n",
    "- `git init` initializes a repository.\n",
    "- Git stores all of its repository data in the .git directory. Be *really* careful before deleting such a directory!\n",
    "- `git status` shows the status of a repository.\n",
    "- `git add` puts files in the staging area.\n",
    "- `git commit` saves the staged content as a new commit in the local repository\n",
    "- `git diff` displays differences between commits.\n",
    "- `git checkout` recovers old versions of files.\n",
    "- `git log --oneline` displays one line describing each commit in the repo.\n",
    "- The `.gitignore` file tells Git what files to ignore.\n",
    "- `git clone` copies a remote repository to create a local repository with a remote called `origin` automatically set up.\n",
    "- Conflicts occur when two or more people change the same file(s) at the same time.\n",
    "- The version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved.\n",
    "- Open scientific work is more useful and more highly cited than closed.\n",
    "- People who are not lawyers should not try to write licenses from scratch.\n",
    "- Add a CITATION file to a repository to explain how you want your work cited.\n",
    "- Projects can be hosted on university servers, on personal domains, or on public forges."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
